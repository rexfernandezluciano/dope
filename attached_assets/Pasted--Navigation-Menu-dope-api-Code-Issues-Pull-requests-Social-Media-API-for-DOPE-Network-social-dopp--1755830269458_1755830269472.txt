
Navigation Menu
dope-api

Code
Issues
Pull requests
Social Media API for DOPE Network

social.dopp.eu.org
License
 Apache-2.0 license
 0 stars
 0 forks
 0 watching
 1 Branch
 0 Tags
 Activity
Private repository
rexfernandezluciano/dope-api
Name	
rexfernandezluciano
rexfernandezluciano
3 minutes ago
api/cron
16 hours ago
prisma
10 hours ago
src
3 hours ago
.gitignore
5 days ago
.replit
16 hours ago
LICENSE
last week
README.md
3 minutes ago
cron-billing-reminder.js
16 hours ago
package-lock.json
8 hours ago
package.json
6 hours ago
Repository files navigation
README
Apache-2.0 license
DOPE Network API Documentation
Table of Contents
Overview
Features
Base URL
Authentication
API Endpoints
Authentication Routes
User Routes
Post Routes
Comment Routes
Like Routes
Reply Routes
Image Routes
Session Routes
Content Moderation Routes
Report Routes
Block Routes
Payment Routes
Data Models
Error Handling
Overview
A comprehensive social media API for the DOPE Network platform supporting user profiles, posts, comments, social interactions, content moderation, payments, and live streaming.

Features
User registration and authentication with email verification
Enhanced session management with device and browser tracking
Text and live video posts with image support
Comments, likes, and replies system with nested threading
User following system
Content moderation with AI
Hashtags and mentions support with automatic extraction
Post sharing and engagement tracking
User reporting and blocking system with restriction levels
Payment methods and subscription management
Live streaming support
Image upload with Cloudinary integration
Subscription tiers (Free, Premium, Pro) with automatic billing reminders
Verified badges (Blue Check)
Google OAuth integration
Earnings tracking for creators with detailed analytics
Global search functionality across posts and comments
User blocking and restriction capabilities
Automated billing reminder emails (3 days before renewal)
Base URL
https://social.dopp.eu.org
Authentication
The API uses JWT (JSON Web Tokens) for authentication. Include the token in the Authorization header:

Authorization: Bearer <your_jwt_token>
API Endpoints
Authentication Routes
Register User
POST /v1/auth/register
Request Body:

{
  "name": "John Doe",
  "email": "john@example.com",
  "username": "johndoe",
  "password": "password123",
  "photoURL": "https://example.com/photo.jpg",
  "subscription": "free",
  "privacy": {
    "profile": "public",
    "comments": "public",
    "sharing": true,
    "chat": "public"
  }
}
Success Response (201):

{
  "message": "Registered. Check your email for the verification code.",
  "verificationId": "verification_uuid",
  "uid": "user_id"
}
Verify Email
POST /v1/auth/verify-email
Request Body:

{
  "email": "john@example.com",
  "code": "123456",
  "verificationId": "verification_id_here"
}
Success Response (200):

{
  "message": "Email verified successfully"
}
Resend Verification Code
POST /v1/auth/resend-code
Request Body:

{
  "email": "john@example.com"
}
Success Response (200):

{
  "message": "Verification code resent",
  "verificationId": "new_verification_id"
}
Email Login
POST /v1/auth/login
Request Body:

{
  "email": "john@example.com",
  "password": "password123",
  "device": "iPhone 15 Pro",
  "location": "New York, US"
}
Success Response (200):

{
  "token": "jwt_token",
  "sessionId": "session_id",
  "user": {
    "uid": "user_id",
    "name": "John Doe",
    "username": "johndoe",
    "email": "john@example.com",
    "photoURL": "https://example.com/photo.jpg",
    "hasBlueCheck": false,
    "membership": {
      "subscription": "premium",
      "nextBillingDate": "2025-12-12T06:09:00.000Z"
    },
    "privacy": {
      "profile": "public",
      "comments": "public",
      "sharing": true,
      "chat": "public"
    },
    "hasVerifiedEmail": true,
    "createdAt": "2024-01-15T10:30:00Z",
    "updatedAt": "2024-01-15T10:30:00Z"
  }
}
Google Login/Signup
POST /v1/auth/google
Request Body:

{
  "token": "google_id_token"
}
Success Response (200/201):

{
  "token": "jwt_token",
  "user": {
    "uid": "user_id",
    "name": "John Doe",
    "username": "johndoe_abc123",
    "email": "john@gmail.com",
    "photoURL": "https://lh3.googleusercontent.com/...",
    "hasBlueCheck": false,
    "membership": {
      "subscription": "free",
      "nextBillingDate": null
    },
    "privacy": {
      "profile": "public",
      "comments": "public",
      "sharing": true,
      "chat": "private"
    },
    "hasVerifiedEmail": true,
    "createdAt": "2024-01-15T10:30:00Z",
    "updatedAt": "2024-01-15T10:30:00Z"
  }
}
Logout
POST /v1/auth/logout
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "Logged out successfully"
}
Get Current User
GET /v1/auth/me
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "status": "ok",
  "user": {
    "uid": "user_id",
    "name": "John Doe",
    "username": "johndoe",
    "email": "john@example.com",
    "bio": "User bio",
    "photoURL": "https://example.com/photo.jpg",
    "hasBlueCheck": false,
    "membership": {
      "subscription": "premium",
      "nextBillingDate": "2025-12-12T06:09:00.000Z"
    },
    "stats": {
      "posts": 9,
      "followers": 23,
      "followings": 1,
      "likes": 127
    },
    "privacy": {
      "profile": "public",
      "comments": "public",
      "sharing": true,
      "chat": "public"
    },
    "hasVerifiedEmail": true,
    "createdAt": "2024-01-15T10:30:00Z",
    "updatedAt": "2024-01-15T10:30:00Z"
  }
}
User Routes
Get All Users
GET /v1/users
Success Response (200):

{
  "status": "ok",
  "users": [
    {
      "uid": "user_id",
      "name": "John Doe",
      "username": "johndoe",
      "bio": "User bio",
      "photoURL": "https://example.com/photo.jpg",
      "hasBlueCheck": false,
      "membership": {
        "subscription": "free"
      },
      "createdAt": "2024-01-15T10:30:00Z",
      "stats": {
        "posts": 42,
        "followers": 150,
        "following": 75
      },
      "isFollowedByCurrentUser": false
    }
  ]
}
Get User by Username
GET /v1/users/:username
Success Response (200):

{
  "status": "ok",
  "user": {
    "uid": "user_id",
    "name": "John Doe",
    "username": "johndoe",
    "bio": "User bio",
    "photoURL": "https://example.com/photo.jpg",
    "hasBlueCheck": false,
    "membership": {
      "subscription": "premium"
    },
    "isBlocked": false,
    "isRestricted": false,
    "createdAt": "2024-01-15T10:30:00Z",
    "posts": [
      {
        "id": "post_id",
        "content": "Hello world! #trending @mention",
        "imageUrls": ["https://example.com/image.jpg"],
        "createdAt": "2024-01-15T10:30:00Z",
        "updatedAt": "2024-01-15T10:30:00Z",
        "stats": {
          "comments": 5,
          "likes": 25,
          "shares": 3,
          "views": 150
        },
        "likes": [
          {
            "user": {
              "uid": "liker_id",
              "username": "liker_username"
            }
          }
        ],
        "postType": "text",
        "liveVideoUrl": null,
        "privacy": "public",
        "hashtags": ["trending"],
        "mentions": ["mention"],
        "author": {
          "uid": "user_id",
          "name": "John Doe",
          "username": "johndoe",
          "photoURL": "https://example.com/photo.jpg",
          "hasBlueCheck": false
        }
      }
    ],
    "stats": {
      "posts": 42,
      "followers": 150,
      "following": 75
    },
    "isFollowedByCurrentUser": false,
    "isBlockedByCurrentUser": false,
    "isRestrictedByCurrentUser": false
  }
}
Update User Profile
PUT /v1/users/:username
Authorization: Bearer <jwt_token>
Request Body:

{
  "name": "Updated Name",
  "bio": "Updated bio",
  "photoURL": "https://example.com/new-photo.jpg",
  "privacy": {
    "profile": "private",
    "comments": "followers",
    "sharing": false,
    "chat": "private"
  }
}
Success Response (200):

{
  "uid": "user_id",
  "name": "Updated Name",
  "username": "johndoe",
  "bio": "Updated bio",
  "photoURL": "https://example.com/new-photo.jpg",
  "hasBlueCheck": false,
  "subscription": "premium",
  "privacy": {
    "profile": "private",
    "comments": "followers",
    "sharing": false,
    "chat": "private"
  },
  "hasVerifiedEmail": true
}
Follow/Unfollow User
POST /v1/users/:username/follow
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "User followed",
  "following": true
}
Get User Followers
GET /v1/users/:username/followers
Success Response (200):

{
  "status": "ok",
  "followers": [
    {
      "uid": "follower_id",
      "name": "Follower Name",
      "username": "follower_username",
      "photoURL": "https://example.com/follower.jpg",
      "hasBlueCheck": false
    }
  ]
}
Get User Following
GET /v1/users/:username/following
Success Response (200):

{
  "status": "ok",
  "following": [
    {
      "uid": "following_id",
      "name": "Following Name",
      "username": "following_username",
      "photoURL": "https://example.com/following.jpg",
      "hasBlueCheck": false
    }
  ]
}
Get User Total Earnings
GET /v1/users/analytics/earnings
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "Total earnings fetched successfully",
  "totalEarnings": 1.50,
  "totalEarningsInCents": 150
}
Post Routes
Get Posts (Randomized Feed)
GET /v1/posts
Query Parameters:

limit: Number of posts (default: 20, max: 100)
cursor: Pagination cursor
author: Filter by username
postType: "text" or "live_video"
hasImages: "true" or "false"
hasLiveVideo: "true" or "false"
search: Search term
Success Response (200):

{
  "status": "ok",
  "posts": [
    {
      "id": "post_id",
      "content": "Hello world! #trending @mention",
      "imageUrls": ["https://example.com/image.jpg"],
      "createdAt": "2024-01-15T10:30:00Z",
      "updatedAt": "2024-01-15T10:30:00Z",
      "stats": {
        "comments": 5,
        "likes": 25,
        "views": 100,
        "shares": 2,
        "clicks": 10
      },
      "author": {
        "uid": "user_id",
        "name": "John Doe",
        "username": "johndoe",
        "photoURL": "https://example.com/photo.jpg",
        "hasBlueCheck": false,
        "isFollowedByCurrentUser": false
      },
      "comments": [
        {
          "id": "comment_id",
          "content": "Great post!",
          "createdAt": "2024-01-15T10:35:00Z",
          "author": {
            "uid": "commenter_id",
            "name": "Commenter",
            "username": "commenter_username",
            "photoURL": "https://example.com/commenter.jpg",
            "hasBlueCheck": false
          }
        }
      ],
      "likes": [
        {
          "user": {
            "uid": "liker_id",
            "username": "liker_username"
          }
        }
      ],
      "postType": "text",
      "liveVideoUrl": null,
      "privacy": "public",
      "hashtags": ["trending"],
      "mentions": ["mention"],
      "moderationStatus": "approved"
    }
  ],
  "nextCursor": "cursor_string",
  "hasMore": true,
  "limit": 20
}
Create Post
POST /v1/posts
Authorization: Bearer <jwt_token>
Request Body:

{
  "content": "Hello world! #trending @mention",
  "imageUrls": ["https://example.com/image.jpg"],
  "liveVideoUrl": "https://example.com/live-stream.m3u8",
  "postType": "live_video",
  "privacy": "public"
}
Success Response (201):

{
  "id": "post_id",
  "content": "Hello world! #trending @mention",
  "imageUrls": ["https://example.com/image.jpg"],
  "liveVideoUrl": "https://example.com/live-stream.m3u8",
  "postType": "live_video",
  "privacy": "public",
  "createdAt": "2024-01-15T10:30:00Z",
  "updatedAt": "2024-01-15T10:30:00Z",
  "authorId": "user_id",
  "hashtags": ["trending"],
  "mentions": ["mention"],
  "moderationStatus": "pending",
  "author": {
    "uid": "user_id",
    "name": "John Doe",
    "username": "johndoe",
    "photoURL": "https://example.com/photo.jpg",
    "hasBlueCheck": false
  },
  "_count": {
    "comments": 0,
    "likes": 0
  }
}
Share Post
POST /v1/posts/share/:id
Success Response (200):

{
  "message": "Post shared successfully"
}
Like Post
POST /v1/posts/:postId/like
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "Post liked successfully"
}
Get Post Likes
GET /v1/posts/:postId/likes
Success Response (200):

{
  "likes": [
    {
      "id": "like_id",
      "createdAt": "2024-01-15T10:30:00Z",
      "user": {
        "uid": "user_id",
        "name": "John Doe",
        "username": "johndoe",
        "photoURL": "https://example.com/photo.jpg",
        "hasBlueCheck": false
      }
    }
  ],
  "nextCursor": null,
  "hasMore": false,
  "limit": 20
}
Track Post View
POST /v1/posts/:id/view
Success Response (200):

{
  "message": "View tracked and earnings updated"
}
Update Post Engagement
POST /v1/posts/:id/engagement
Request Body:

{
  "action": "share"
}
Success Response (200):

{
  "message": "share tracked and earnings updated",
  "earnings": 0.001
}
Delete Post
DELETE /v1/posts/:id
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "Post deleted successfully"
}
Comment Routes
Get Comments for Post
GET /v1/comments/post/:postId
Query Parameters:

limit: Number of comments (default: 20, max: 100)
cursor: Pagination cursor
author: Filter by username
search: Search term
sortBy: "desc" or "asc" (default: "desc")
Search Comments Globally
GET /v1/comments/search
Query Parameters:

query: Search term (required)
limit: Number of comments (default: 20, max: 100)
cursor: Pagination cursor
author: Filter by username
postId: Filter by specific post
sortBy: "desc" or "asc" (default: "desc")
Success Response (200):

{
  "comments": [
    {
      "id": "comment_id",
      "content": "Great post! #awesome @user",
      "createdAt": "2024-01-15T10:35:00Z",
      "updatedAt": "2024-01-15T10:35:00Z",
      "postId": "post_id",
      "authorId": "user_id",
      "hashtags": ["awesome"],
      "mentions": ["user"],
      "author": {
        "uid": "user_id",
        "name": "John Doe",
        "username": "johndoe",
        "photoURL": "https://example.com/photo.jpg",
        "hasBlueCheck": false
      },
      "replies": [
        {
          "id": "reply_id",
          "content": "Thanks!",
          "createdAt": "2024-01-15T10:40:00Z",
          "author": {
            "uid": "author_id",
            "name": "Author",
            "username": "author_username",
            "photoURL": "https://example.com/author.jpg",
            "hasBlueCheck": true
          }
        }
      ]
    }
  ],
  "nextCursor": "cursor_string",
  "hasMore": true,
  "limit": 20,
  "sortBy": "desc"
}
Create Comment
POST /v1/comments/post/:postId
Authorization: Bearer <jwt_token>
Request Body:

{
  "content": "Great post! #awesome @user"
}
Success Response (201):

{
  "id": "comment_id",
  "content": "Great post! #awesome @user",
  "createdAt": "2024-01-15T10:35:00Z",
  "updatedAt": "2024-01-15T10:35:00Z",
  "postId": "post_id",
  "authorId": "user_id",
  "hashtags": ["awesome"],
  "mentions": ["user"],
  "author": {
    "uid": "user_id",
    "name": "John Doe",
    "username": "johndoe",
    "photoURL": "https://example.com/photo.jpg",
    "hasBlueCheck": false
  }
}
Update Comment
PUT /v1/comments/:id
Authorization: Bearer <jwt_token>
Request Body:

{
  "content": "Updated comment"
}
Success Response (200):

{
  "id": "comment_id",
  "content": "Updated comment",
  "createdAt": "2024-01-15T10:35:00Z",
  "updatedAt": "2024-01-15T11:00:00Z",
  "postId": "post_id",
  "authorId": "user_id",
  "hashtags": [],
  "mentions": [],
  "author": {
    "uid": "user_id",
    "name": "John Doe",
    "username": "johndoe",
    "photoURL": "https://example.com/photo.jpg",
    "hasBlueCheck": false
  }
}
Delete Comment
DELETE /v1/comments/:id
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "Comment deleted successfully"
}
Like Routes
Like/Unlike Comment
POST /v1/comments/:commentId/like
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "Comment liked",
  "liked": true
}
Get Comment Likes
GET /v1/comments/:commentId/likes
Success Response (200):

{
  "likes": [
    {
      "id": "like_id",
      "createdAt": "2024-01-15T10:30:00Z",
      "user": {
        "uid": "user_id",
        "name": "John Doe",
        "username": "johndoe",
        "photoURL": "https://example.com/photo.jpg",
        "hasBlueCheck": false
      }
    }
  ],
  "nextCursor": null,
  "hasMore": false,
  "limit": 20
}
Like/Unlike Reply
POST /v1/likes/reply/:replyId
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "Reply liked",
  "liked": true
}
Reply Routes
Create Reply
POST /v1/replies/comment/:commentId
Authorization: Bearer <jwt_token>
Request Body:

{
  "content": "This is a reply to the comment"
}
Success Response (201):

{
  "id": "reply_id",
  "content": "This is a reply to the comment",
  "createdAt": "2024-01-15T10:40:00Z",
  "updatedAt": "2024-01-15T10:40:00Z",
  "postId": "post_id",
  "parentId": "comment_id",
  "authorId": "user_id",
  "author": {
    "uid": "user_id",
    "name": "John Doe",
    "username": "johndoe",
    "photoURL": "https://example.com/photo.jpg",
    "hasBlueCheck": false
  },
  "_count": {
    "likes": 0,
    "replies": 0
  }
}
Get Comment Replies
GET /v1/replies/comment/:commentId
Query Parameters:

limit (optional): Number of replies to return (max 100, default 20)
cursor (optional): Cursor for pagination
sortBy (optional): Sort order ("asc" or "desc", default "desc")
Success Response (200):

{
  "replies": [
    {
      "id": "reply_id",
      "content": "This is a reply to the comment",
      "createdAt": "2024-01-15T10:40:00Z",
      "updatedAt": "2024-01-15T10:40:00Z",
      "author": {
        "uid": "user_id",
        "name": "John Doe",
        "username": "johndoe",
        "photoURL": "https://example.com/photo.jpg",
        "hasBlueCheck": false
      },
      "likes": [
        {
          "user": {
            "uid": "user_id",
            "username": "johndoe"
          }
        }
      ],
      "stats": {
        "likes": 1,
        "replies": 0
      }
    }
  ],
  "nextCursor": "cursor_value",
  "hasMore": true,
  "limit": 20
}
Update Reply
PUT /v1/replies/:id
Authorization: Bearer <jwt_token>
Request Body:

{
  "content": "Updated reply content"
}
Success Response (200):

{
  "id": "reply_id",
  "content": "Updated reply content",
  "createdAt": "2024-01-15T10:40:00Z",
  "updatedAt": "2024-01-15T11:00:00Z",
  "commentId": "comment_id",
  "authorId": "user_id",
  "hashtags": [],
  "mentions": [],
  "author": {
    "uid": "user_id",
    "name": "John Doe",
    "username": "johndoe",
    "photoURL": "https://example.com/photo.jpg",
    "hasBlueCheck": false
  }
}
Delete Reply
DELETE /v1/replies/:id
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "Reply deleted successfully"
}
Image Routes
Upload Images
POST /v1/images/upload
Authorization: Bearer <jwt_token>
Content-Type: multipart/form-data
Form Data:

images: File[] (up to 10 image files, max 10MB each)
Success Response (200):

{
  "success": true,
  "imageUrls": [
    "https://res.cloudinary.com/your-cloud/image/upload/v1642234567/posts/image1.jpg",
    "https://res.cloudinary.com/your-cloud/image/upload/v1642234567/posts/image2.jpg"
  ]
}
Error Response (400):

{
  "error": "No images provided"
}
Session Routes
Get User Sessions
GET /v1/sessions
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "sessions": [
    {
      "id": "session_id",
      "device": "iPhone 15 Pro",
      "browser": "Chrome",
      "ipAddress": "192.168.1.1",
      "location": "New York, US",
      "isActive": true,
      "createdAt": "2024-01-15T10:30:00Z",
      "updatedAt": "2024-01-15T10:30:00Z",
      "expiresAt": "2024-01-16T10:30:00Z"
    }
  ]
}
Revoke Session
DELETE /v1/sessions/:sessionId
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "Session revoked successfully"
}
Revoke All Sessions
DELETE /v1/sessions
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "All other sessions revoked successfully",
  "revokedCount": 3
}
Content Moderation Routes
Moderate Content with AI
POST /v1/content/moderate
Authorization: Bearer <jwt_token>
Request Body:

{
  "content": "Content to moderate",
  "type": "post"
}
Success Response (200):

{
  "approved": true,
  "reason": null,
  "confidence": 0.95
}
Blocked Content Response (200):

{
  "approved": false,
  "reason": "Contains inappropriate content",
  "confidence": 0.89
}
Check Image Sensitivity
POST /v1/content/check-image
Authorization: Bearer <jwt_token>
Request Body:

{
  "imageUrl": "https://example.com/image.jpg"
}
Success Response (200):

{
  "safe": true,
  "reason": null,
  "confidence": 0.92
}
Report Routes
Create Report
POST /v1/reports
Authorization: Bearer <jwt_token>
Request Body:

{
  "targetType": "post",
  "targetId": "post_id",
  "reason": "spam",
  "description": "This post contains spam content"
}
Success Response (201):

{
  "message": "Report submitted successfully",
  "reportId": "report_id"
}
Get User Reports
GET /v1/reports
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "reports": [
    {
      "id": "report_id",
      "targetType": "post",
      "targetId": "post_id",
      "reason": "spam",
      "description": "This post contains spam content",
      "status": "pending",
      "createdAt": "2024-01-15T10:30:00Z",
      "reporter": {
        "uid": "user_id",
        "username": "johndoe",
        "name": "John Doe"
      }
    }
  ]
}
Block Routes
Block User
POST /v1/blocks/user/:userId
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "User blocked successfully"
}
Unblock User
DELETE /v1/blocks/user/:userId
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "User unblocked successfully"
}
Get Blocked Users
GET /v1/blocks
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "blockedUsers": [
    {
      "id": "block_id",
      "blockedUserId": "blocked_user_id",
      "createdAt": "2024-01-15T10:30:00Z",
      "blockedUser": {
        "uid": "blocked_user_id",
        "username": "blocked_username",
        "name": "Blocked User",
        "photoURL": "https://example.com/blocked.jpg"
      }
    }
  ]
}
Restrict User (Limit interactions without full block)
POST /v1/blocks/restrict/:userId
Authorization: Bearer <jwt_token>
Request Body:

{
  "reason": "harassment"
}
Success Response (200):

{
  "message": "User restricted successfully"
}
Remove Restriction
DELETE /v1/blocks/restrict/:userId
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "User restriction removed successfully"
}
Payment Routes
Get Available Payment Providers
GET /v1/payments/providers
Success Response (200):

{
  "providers": [
    {
      "type": "credit_card",
      "name": "Credit Card",
      "providers": ["Visa", "Mastercard", "American Express", "Discover"],
      "fees": "2.9% + $0.30",
      "processingTime": "Instant"
    },
    {
      "type": "paypal",
      "name": "PayPal",
      "providers": ["PayPal"],
      "fees": "2.9% + $0.30",
      "processingTime": "Instant"
    },
    {
      "type": "crypto",
      "name": "Cryptocurrency",
      "providers": ["Bitcoin", "Ethereum", "USDC"],
      "fees": "1.5%",
      "processingTime": "10-60 minutes"
    }
  ],
  "membershipPlans": [
    {
      "type": "premium",
      "name": "Premium",
      "price": 9.99,
      "currency": "USD",
      "interval": "month",
      "features": ["Ad-free experience", "Priority support", "Extended analytics", "Custom themes"]
    },
    {
      "type": "pro",
      "name": "Pro",
      "price": 19.99,
      "currency": "USD",
      "interval": "month",
      "features": ["All Premium features", "Advanced analytics", "API access", "Custom branding", "Priority moderation"]
    }
  ]
}
Add Payment Method
POST /v1/payments/methods
Authorization: Bearer <jwt_token>
Request Body (Credit/Debit Card):

{
  "type": "credit_card",
  "provider": "Visa",
  "last4": "1111",
  "expiryMonth": 12,
  "expiryYear": 2025,
  "holderName": "John Doe",
  "isDefault": true
}
Request Body (PayPal):

{
  "type": "paypal",
  "provider": "PayPal",
  "paypalEmail": "john@example.com",
  "isDefault": false
}
Request Body (Bank Transfer):

{
  "type": "bank_transfer",
  "provider": "ACH",
  "isDefault": false
}
Request Body (Cryptocurrency):

{
  "type": "crypto",
  "provider": "Bitcoin",
  "isDefault": false
}
Success Response (201):

{
  "message": "Payment method added successfully",
  "paymentMethod": {
    "id": "pm_123456789",
    "type": "credit_card",
    "provider": "Visa",
    "last4": "1111",
    "isDefault": true
  }
}
Error Response (400):

{
  "message": "Invalid payload",
  "errors": [
    {
      "code": "invalid_type",
      "expected": "number",
      "received": "string",
      "path": ["expiryMonth"],
      "message": "Expected number, received string"
    }
  ]
}
Get Payment Methods
GET /v1/payments/methods
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "paymentMethods": [
    {
      "id": "pm_123456789",
      "type": "credit_card",
      "provider": "Visa",
      "last4": "1111",
      "expiryMonth": 12,
      "expiryYear": 2025,
      "holderName": "John Doe",
      "isDefault": true,
      "createdAt": "2024-01-15T10:30:00Z"
    },
    {
      "id": "pm_987654321",
      "type": "paypal",
      "provider": "PayPal",
      "isDefault": false,
      "createdAt": "2024-01-10T08:15:00Z"
    }
  ]
}
Delete Payment Method
DELETE /v1/payments/methods/:paymentMethodId
Authorization: Bearer <jwt_token>
Success Response (200):

{
  "message": "Payment method deleted successfully"
}
Error Response (404):

{
  "message": "Payment method not found"
}
Purchase Membership
POST /v1/payments/purchase-membership
Authorization: Bearer <jwt_token>
Request Body:

{
  "subscription": "premium",
  "paymentMethodId": "pm_123456789"
}
Success Response (200):

{
  "message": "Membership purchased successfully",
  "subscription": "premium",
  "nextBillingDate": "2025-02-15T10:30:00Z"
}
Error Responses:

{
  "message": "Invalid subscription type"
}
{
  "message": "Payment method not found"
}